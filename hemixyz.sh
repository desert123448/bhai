#!/bin/bash# Fetch logocurl -s https://github.com/FEdanish/t3rn-node/blob/main/logo.sh | bashsleep 3ARCH=$(uname -m)# Function to display messages in whiteshow() {    echo -e "\033[1;37m$1\033[0m"  # White color}show_error() {    echo -e "\033[1;31m$1\033[0m"  # Red color for errors}show_success() {    echo -e "\033[1;32m$1\033[0m"  # Green color for success}# Function to display a spinner while waitingspinner() {    local pid=$1    local delay=0.1    local spin='/-\|'    local i=0    while ps -p $pid > /dev/null; do        i=$(( (i + 1) % 4 ))        printf "\r${spin:$i:1}  "        sleep $delay    done    printf "\r   \r"  # Clear the spinner}# Check and install jqif ! command -v jq &> /dev/null; then    show "jq not found, installing..."    sudo apt-get update    sudo apt-get install -y jq > /dev/null 2>&1    if [ $? -ne 0 ]; then        show_error "Failed to install jq. Please check your package manager."        exit 1    fifi# Function to check for the latest versioncheck_latest_version() {    for i in {1..3}; do        LATEST_VERSION=$(curl -s https://api.github.com/repos/hemilabs/heminetwork/releases/latest | jq -r '.tag_name')        if [ -n "$LATEST_VERSION" ]; then            show "Latest version available: $LATEST_VERSION"            return 0        fi        show_error "Attempt $i: Failed to fetch the latest version. Retrying..."        sleep 2    done    show_error "Failed to fetch the latest version after 3 attempts. Please check your internet connection or GitHub API limits."    exit 1}check_latest_versiondownload_required=true# Check architecture and existence of downloaded versionif [ "$ARCH" == "x86_64" ]; then    if [ -d "heminetwork_${LATEST_VERSION}_linux_amd64" ]; then        show "Latest version for x86_64 is already downloaded. Skipping download."        cd "heminetwork_${LATEST_VERSION}_linux_amd64" || { show_error "Failed to change directory."; exit 1; }        download_required=false    fielif [ "$ARCH" == "arm64" ]; then    if [ -d "heminetwork_${LATEST_VERSION}_linux_arm64" ]; then        show "Latest version for arm64 is already downloaded. Skipping download."        cd "heminetwork_${LATEST_VERSION}_linux_arm64" || { show_error "Failed to change directory."; exit 1; }        download_required=false    fifi# Download the required version if not already presentif [ "$download_required" = true ]; then    if [ "$ARCH" == "x86_64" ]; then        show "Downloading for x86_64 architecture..."        wget --quiet --show-progress "https://github.com/hemilabs/heminetwork/releases/download/$LATEST_VERSION/heminetwork_${LATEST_VERSION}_linux_amd64.tar.gz" -O "heminetwork_${LATEST_VERSION}_linux_amd64.tar.gz" &        spinner $!        tar -xzf "heminetwork_${LATEST_VERSION}_linux_amd64.tar.gz" > /dev/null        cd "heminetwork_${LATEST_VERSION}_linux_amd64" || { show_error "Failed to change directory."; exit 1; }    elif [ "$ARCH" == "arm64" ]; then        show "Downloading for arm64 architecture..."        wget --quiet --show-progress "https://github.com/hemilabs/heminetwork/releases/download/$LATEST_VERSION/heminetwork_${LATEST_VERSION}_linux_arm64.tar.gz" -O "heminetwork_${LATEST_VERSION}_linux_arm64.tar.gz" &        spinner $!        tar -xzf "heminetwork_${LATEST_VERSION}_linux_arm64.tar.gz" > /dev/null        cd "heminetwork_${LATEST_VERSION}_linux_arm64" || { show_error "Failed to change directory."; exit 1; }    else        show_error "Unsupported architecture: $ARCH"        exit 1    fielse    show "Skipping download as the latest version is already present."fi# User input for wallet choiceechoshow "Sᴇʟᴇᴄᴛ ᴏɴᴇ ᴏᴘᴛɪᴏɴ:"show "a. Usᴇ ɴᴇᴡ ᴡᴀʟʟᴇᴛ ғᴏʀ PᴏP ᴍɪɴɪɴɢ"show "b. Usᴇ ᴇxɪsᴛɪɴɢ ᴡᴀʟʟᴇᴛ ғᴏʀ PᴏP ᴍɪɴɪɴɢ"read -p "Sᴇʟᴇᴄᴛ ʏᴏᴜʀ ᴏᴘᴛɪᴏɴ (a/b): " choiceecho# Wallet generation or existing wallet usageif [ "$choice" == "a" ]; then    show "Generating a new wallet..."    ./keygen -secp256k1 -json -net="testnet" > ~/popm-address.json    if [ $? -ne 0 ]; then        show_error "Failed to generate wallet."        exit 1    fi    cat ~/popm-address.json    echo    read -p "Have you saved the above details? (y/N): " saved    echo    if [[ "$saved" =~ ^[Yy]$ ]]; then        pubkey_hash=$(jq -r '.pubkey_hash' ~/popm-address.json)        show "Join: https://discord.gg/hemixyz"        show "Request faucet from faucet channel to this address: $pubkey_hash"        echo        read -p "Have you requested faucet? (y/N): " faucet_requested        if [[ "$faucet_requested" =~ ^[Yy]$ ]]; then            priv_key=$(jq -r '.private_key' ~/popm-address.json)            read -p "Enter fee (100-200): " static_fee            echo        fi    fielif [ "$choice" == "b" ]; then    read -p "Type your Private key: " priv_key    read -p "Enter fee (100-200): " static_fee    echofi# Manage the systemd serviceif systemctl is-active --quiet hemi.service; then    show "hemi.service is currently running. Stopping and disabling it..."    sudo systemctl stop hemi.service    sudo systemctl disable hemi.serviceelse    show "hemi.service is not running."fi# Create the systemd servicecat << EOF | sudo tee /etc/systemd/system/hemi.service > /dev/null[Unit]Description=Hemi Network popmd ServiceAfter=network.target[Service]WorkingDirectory=$(pwd)ExecStart=$(pwd)/popmdEnvironment="POPM_BTC_PRIVKEY=$priv_key"Environment="POPM_STATIC_FEE=$static_fee"Environment="POPM_BFG_URL=wss://testnet.rpc.hemi.network/v1/ws/public"Restart=on-failure[Install]WantedBy=multi-user.targetEOFsudo systemctl daemon-reloadsudo systemctl enable hemi.servicesudo systemctl start hemi.serviceechoshow_success "PᴏP ᴍɪɴɪɴɢ ʜᴀs ʙᴇᴇɴ sᴜᴄᴄᴇssғᴜʟʟʏ sᴛᴀʀᴛᴇᴅ!"